import sys
import time
from lists import *
from PyQt4.QtGui import *
from PyQt4.QtCore import *

class ImageUploader(QDialog):
  def __init__(self):
    super(ImageUploader, self).__init__()
    self.setStyleSheet('font-size: 16pt; font-family: Courier;')
    self.uploaderUI()

  def createButton(self, name, buttonFunction, tooltip):
    btn = QPushButton(name, self)
    btn.clicked.connect(buttonFunction)
    btn.setToolTip(tooltip)
    return btn
  
  def uploaderUI(self):
    i = 0
    labelNames = []
    self.dropdowns = []

    #Creates a list of labels from the FIELD_NAMES list
    for name in FIELD_NAMES:
      labelNames.append(QLabel(name))
      
    #Creates a list of dropdown menus
    for field in ALL_FIELDS:
      self.dropdowns.append(QComboBox(self))
      for option in field:
        self.dropdowns[i].addItem(option)
      i = i+1
      
    #Creates a grid layout
    self.grid = QGridLayout()
    self.grid.setSpacing(10)
    j = 0
    l = 3

    #Add title
    self.grid.addWidget(QLabel('Malara Image Uploader'), 1, 1, 1, 3)

    #Add widget to allow upload of image
    self.grid.addWidget(QLabel('Image Location'), 2, 0)
    self.fileLine = QLineEdit(self)
    self.grid.addWidget(self.fileLine, 2, 1, 1, 2)
    self.grid.addWidget(self.createButton('Locate', self.findFile, toolTip[0]), 2, 3)
    #Create dropdown menus
    for name in labelNames:
      self.grid.addWidget(labelNames[j], l, 0)
      self.grid.addWidget(self.dropdowns[j], l, 1, 1, 3)
      j = j + 1
      l = l + 1

    #Add the management buttons at the bottom
    self.grid.addWidget(self.createButton('Upload', self.uploadImage, toolTip[j]), j+3, 1)
    self.grid.addWidget(self.createButton('Reset', self.resetFields, toolTip[j+1]), j+3, 2)
    self.grid.addWidget(self.createButton('Close', self.close, toolTip[j+2]), j+3, 3)

    #Display housekeeping
    self.setLayout(self.grid)
    self.move(300, 150)
    self.setWindowTitle('PlasPodium Image Uploader') #Title of the program
    self.setWindowIcon(QIcon('icon.png'))
    self.show() 

  
  def findFile(self):
    self.fileDialog = QFileDialog(self)
    filename = self.fileDialog.getOpenFileName()
    self.fileLine.setText(filename)
    
  
  def uploadImage(self):
      for field in self.dropdowns:
        if not(self.fileCheck(self.fileLine.text())):
          self.warning('Attention', 'Invalid file type')
          break
        elif field.currentText() == '<Please select one>':
         self.warning('Attention', 'Please ensure that all fields are complete. If no labels are applicable, choose NULL.')
         break
        else:
          print(self.fileLine.text())
          print(field.currentText())
          print(time.strftime("%d/%m/%Y"))
 
  
  def resetFields(self):
    self.fileLine.setText('')
    for field in self.dropdowns:
        field.setCurrentIndex(0)

        
  def warning(self, title, text):
    return QMessageBox.warning(self, title, text, QMessageBox.Ok)


  def fileCheck(self, path):
   for filetype in FILE_TYPES:
     if path.endsWith(filetype):
       return True
   return False      
        
